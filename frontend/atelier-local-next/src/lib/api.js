/**
 * Retourne dynamiquement l‚ÄôURL de base de l‚ÄôAPI selon l‚Äôenvironnement d‚Äôex√©cution (serveur ou client).
 *
 * @returns {string} - L‚ÄôURL de base de l‚ÄôAPI √† utiliser pour les requ√™tes HTTP.
 *
 * Cette fonction a pour objectif de garantir que les appels √† l‚ÄôAPI backend
 * utilisent toujours la bonne URL, que le code soit ex√©cut√© c√¥t√© serveur (SSR)
 * ou c√¥t√© client (navigateur).
 *
 * üîπ C√¥t√© serveur :
 *   - `window` n‚Äôest pas d√©fini, donc on lit la variable d‚Äôenvironnement `NEXT_PUBLIC_API_URL`
 *     (configurable dans un fichier `.env`).
 *   - Si cette variable n‚Äôexiste pas, l‚ÄôURL par d√©faut est `http://localhost:8080`.
 *
 * üîπ C√¥t√© client :
 *   - On construit dynamiquement l‚ÄôURL √† partir du protocole et du nom d‚Äôh√¥te
 *     de la page courante, puis on ajoute le port `8080`.
 *   - Cela permet d‚Äô√©viter les erreurs li√©es √† des environnements diff√©rents
 *     (d√©veloppement local, pr√©production, production).
 */
const getApiUrl = () => {
  // D√©tection de l‚Äôenvironnement (SSR vs navigateur)
  if (typeof window === 'undefined') {
    // Ex√©cution c√¥t√© serveur : on utilise la variable d‚Äôenvironnement ou un fallback local
    return process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';
  }

  // Ex√©cution c√¥t√© client : on reconstruit dynamiquement l‚ÄôURL en fonction du domaine actuel
  return `${window.location.protocol}//${window.location.hostname}:8080`;
};

export default getApiUrl;